#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:data", "data")


#@ if data.values.metadata.infraProvider == "aws":
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: default
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
#@ if data.values.metadata.enableCsiDriver:
provisioner: kubernetes.io/aws-ebs
#@ else:
provisioner: kubernetes.io/aws-ebs
#@ end
allowVolumeExpansion: true
#@ end

#@ if data.values.metadata.infraProvider == "azure":
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: default
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
  labels:
    kubernetes.io/cluster-service: "true"
#@ if data.values.metadata.enableCsiDriver:
provisioner: disk.csi.azure.com
#@ else:
provisioner: kubernetes.io/azure-disk
#@ end
allowVolumeExpansion: true
parameters:
  kind: Managed
  storageaccounttype: Standard_LRS
  cachingmode: ReadOnly
volumeBindingMode: WaitForFirstConsumer
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: azure-file
  labels:
    kubernetes.io/cluster-service: "true"
#@ if data.values.metadata.enableCsiDriver:
provisioner: file.csi.azure.com
#@ else:
provisioner: kubernetes.io/azure-file
#@ end
allowVolumeExpansion: true
parameters:
  skuName: Standard_LRS
volumeBindingMode: WaitForFirstConsumer
#@ end

#@ if data.values.metadata.infraProvider == "vsphere":
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: default
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
provisioner: csi.vsphere.vmware.com
allowVolumeExpansion: true
#@ if data.values.VSPHERE_STORAGE_POLICY_ID != "":
parameters:
  storagepolicyname: #@ data.values.VSPHERE_STORAGE_POLICY_ID
#@ end
#@ end
